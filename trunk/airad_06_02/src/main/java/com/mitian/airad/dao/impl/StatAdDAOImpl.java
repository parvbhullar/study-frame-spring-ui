package com.mitian.airad.dao.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.StatAdDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.LogInfo;
import com.mitian.airad.model.StatAd;
import com.mitian.airad.utils.StringUtil;

/**
 * StatAdDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class StatAdDAOImpl extends CustomSqlMapClientDaoSupport implements StatAdDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public StatAdDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public int deleteByPrimaryKey(Integer shatAdId) {
        StatAd key = new StatAd();
        key.setShatAdId(shatAdId);
        int rows = getSqlMapClientTemplate().delete("STAT_AD.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public void insert(StatAd record) {
        getSqlMapClientTemplate().insert("STAT_AD.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public void insertSelective(StatAd record) {
        getSqlMapClientTemplate().insert("STAT_AD.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public StatAd selectByPrimaryKey(Integer shatAdId) {
        StatAd key = new StatAd();
        key.setShatAdId(shatAdId);
        StatAd record =
                (StatAd) getSqlMapClientTemplate().queryForObject("STAT_AD.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public int updateByPrimaryKeySelective(StatAd record) {
        int rows = getSqlMapClientTemplate().update("STAT_AD.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table STAT_AD
     * 
     * @ibatorgenerated Wed Mar 09 15:41:05 CST 2011
     */
    public int updateByPrimaryKey(StatAd record) {
        int rows = getSqlMapClientTemplate().update("STAT_AD.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * 某个用户的广告的总展示次数
     * 
     * @param map
     * @return
     */
    public StatAd queryAdShwoByMemberId(Map<String, String> map) {
        StatAd statAd = (StatAd) getSqlMapClientTemplate().queryForObject("STAT_AD.queryAdShwoByMemberId", map);
        if (statAd == null) {
            statAd = new StatAd();
        }
        return statAd;
    }

    /**
     * 广告统计(详细)
     */
    public List<StatAd> querybyadDetailList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 广告统计(汇总)
     */
    public List<StatAd> querybyadTotalList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // 需要注释，因为数据不全的话就会缺少数据
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 活动统计(详细)
     */
    public List<StatAd> queryCampaignDetailList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.queryCampaignDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 活动统计(汇总)
     */
    public List<StatAd> queryCampaignTotalList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // 需要注释，因为数据不全的话就会缺少数据
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.queryCampaignTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 广告组统计(详细)
     */
    public List<StatAd> querybyadGroupDetailList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadGroupDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 广告组统计(汇总)
     */
    public List<StatAd> querybyadGroupTotalList(Map<String, String> map) {
        int pageSize = StringUtil.stringToInteger(map.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(map.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        // 需要注释，因为数据不全的话就会缺少数据
        // map.put("fromRecord", String.valueOf(fromRecord));
        map.put("pageSize", String.valueOf(pageSize));
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadGroupTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    /**
     * 所有
     */
    public List<StatAd> selectadDetailList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    public List<StatAd> selectadTotalList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    public List<StatAd> selectadGroupDetailList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadGroupDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    public List<StatAd> selectadGroupTotalList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadGroupTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    public List<StatAd> selectcampaignIdDetailList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.queryCampaignDetailList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    public List<StatAd> selectcampaignIdTotalList(Map<String, String> map) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.queryCampaignTotalList", map);
        if (list.isEmpty()) {
            list = new ArrayList<StatAd>();
        }
        return list;
    }

    // @SuppressWarnings("unchecked")
    // private List<StatAd> splitStatAd(List<StatAd> listStatAdBean, String tomorrowDay, String type) throws Exception {
    // StatAd key = new StatAd();
    // List<StatAd> listAdInfo = new ArrayList<StatAd>();
    // StringBuffer sb = new StringBuffer();
    // for (StatAd ad : listStatAdBean) {
    // sb.append(ad.getAdId().toString()).append(CommonDef.STR_COMMA);
    // }
    // String inAdId = sb.toString();
    // if (CommonDef.dateType.CON_JOB_DAY.equals(type)) {
    // key.setReqTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMMDD, tomorrowDay)));
    // }
    // else {
    // key.setReqTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMM, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMM, tomorrowDay)));
    // }
    // if (StringUtils.isNotEmpty(inAdId)) {
    // key.setInAdId(StringUtil.formatStringToInCondition(inAdId));
    // log.info("根据日志表中的错误数据查找统计数据开始...");
    // listAdInfo = getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", key);
    // log.info("根据日志表中的错误数据查找统计数据结束.");
    // }
    // return listAdInfo;
    // }

    /**
     * Ad统计表
     */
    // @SuppressWarnings("unchecked")
    // public void findByTiimeAd(String jobTime, String tomorrowDay, String type) throws Exception {
    // log.info("AdJob 开始执行....");
    // StatAd statAd = new StatAd();
    // StatAd adJob = new StatAd();
    // LogInfo logBean = new LogInfo();
    // logBean.setJobStatType(type);
    // if (CommonDef.dateType.CON_JOB_DAY.equals(type)) {
    // logBean.setJobTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMMDD, tomorrowDay)));
    // statAd.setReqTime(logBean.getJobTime());
    // adJob.setReqTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMMDD, jobTime)));
    // }
    // else {
    // // 如果是月将日期放到上个月
    // tomorrowDay =
    // ReportDateUtil.getEndingDateOfLastMonth(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD,
    // new Date()));
    // logBean.setJobTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMM, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMM, tomorrowDay)));
    // statAd.setReqTime(logBean.getJobTime());
    // adJob.setReqTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMM, ReportDateUtil.getDate(
    // CommonDef.dateStyle.CON_YYYYMM, jobTime)));
    // }
    // logBean.setJobName(CommonDef.jobName.CON_JOB_AD);
    // int countAdId = statCountAdId();
    // int countLog = statCountLog(logBean);
    // // 将数据分成20次做循环处理
    // // 查找出LOG失败的数据
    // log.info("查找日志表中数据开始...");
    // List<StatAd> listStatAd = new ArrayList<StatAd>();
    // List<LogInfo> logInfoBean = new ArrayList<LogInfo>();
    // List<StatAd> listAdTemp = new ArrayList<StatAd>(200000);
    // // int n = 200;
    // // for (int i = 0; i < countLog; i++) {
    // // logBean.setStartPag(i);
    // //
    // // if (countLog > n) {
    // // logBean.setEndPag(n);
    // // List<LogInfo> logInfoBeanT =
    // // getSqlMapClientTemplate().queryForList("LOG_INFO.findByStatusJobName", logBean);
    // // i = n;
    // // n += 200;
    // // // logInfoBean.addAll(logInfoBeanT);
    // // }
    // // else {
    // // logBean.setEndPag(countLog);
    // // List<LogInfo> logInfoBeanT =
    // // getSqlMapClientTemplate().queryForList("LOG_INFO.findByStatusJobName", logBean);
    // // i = n;
    // // // logInfoBean.addAll(logInfoBeanT);
    // // }
    // // }
    // // int m = 200;
    // // for (int i = 0; i < countAdId; i++) {
    // // statAd.setStartPag(i);
    // //
    // // if (countAdId > m) {
    // // statAd.setEndPag(m);
    // // List<StatAd> listAdT = getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", statAd);
    // // i = m;
    // // m += 200;
    // // // listAdTemp.addAll(listAdT);
    // // }
    // // else {
    // // statAd.setEndPag(countAdId);
    // // List<StatAd> listAdT = getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", statAd);
    // // i = m;
    // // // listAdTemp.addAll(listAdT);
    // // }
    // // }
    // // 查找前天正确的数据
    // // List<LogInfo> logInfoBeanT = getSqlMapClientTemplate().queryForList("LOG_INFO.findByStatusJobName", logBean);
    // // 查找前天所有的数据与正确数据进行比对找出错误的数据
    // // List<StatAd> listAgentT = getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", statAd);
    // Map<String, StatAd> logMap = new HashMap<String, StatAd>();
    // for (StatAd ad : listAdTemp) {
    // logMap.put(ad.getAdId().toString(), ad);
    // }
    // for (LogInfo logInfo : logInfoBean) {
    // if (logMap.containsKey(logInfo.getName())) {
    // logMap.remove(logInfo.getName());
    // }
    // }
    //
    // Iterator<String> it = logMap.keySet().iterator();
    // while (it.hasNext()) {
    // String key = it.next();
    // listStatAd.add(logMap.get(key));
    // }
    //
    // log.info("查找日志表中的数据结束.");
    // List<StatAd> listAdInfo = new ArrayList<StatAd>();
    // int k = 200;
    // for (int i = 0; i < listStatAd.size(); i++) {
    // if (listStatAd.size() > k) {
    // List<StatAd> listTemp = new ArrayList<StatAd>();
    // listTemp = listStatAd.subList(i, k);
    // listAdInfo.addAll(splitStatAd(listTemp, tomorrowDay, type));
    // i = k;
    // k = k + 200;
    // }
    // else {
    // List<StatAd> listTemp = new ArrayList<StatAd>();
    // listTemp = listStatAd.subList(i, listStatAd.size());
    // listAdInfo.addAll(splitStatAd(listTemp, tomorrowDay, type));
    // i = k;
    // }
    // }
    // Date date = new Date();
    // log.info("操作错误数据JOB开始写入...");
    // logInfoMethod(date, listAdInfo, tomorrowDay, type);
    // log.info("操作错误数据JOB结束写入.");
    //
    // // 当天 的统计
    // log.info(" ADJOB 数据开始统计...");
    // List<StatAd> list = getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", adJob);
    // logInfoMethod(date, list, jobTime, type);
    // log.info(" ADJOB 数据结束统计.");
    // log.info("ADJOB 结束执行.");
    // }

    // /**
    // * JOB的数据操作
    // *
    // * @param date
    // * @param list
    // * @param dateStr
    // * @param type
    // * @throws Exception
    // */
    // private void logInfoMethod(Date date, List<StatAd> list, String dateStr, String type) throws Exception {
    // log.info("JOB的数据操作开始...");
    // for (StatAd statAd : list) {
    // try {
    // log.info("写入" + statAd.getAdName() + "开始...");
    // statAd.setAddTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD, dateStr));
    // statAd.setJobStatTime(date);
    // statAd.setJobStatType(type);
    // getSqlMapClientTemplate().insert("STAT_AD.ibatorgenerated_insertSelective", statAd);
    // log.info("写入 结束.");
    // LogInfo logInfo = new LogInfo();
    // logInfo.setName(statAd.getAdId().toString());
    // logInfo.setJobAddTime(date);
    // logInfo.setJobStatTime(ReportDateUtil.getDate(CommonDef.dateStyle.CON_YYYYMMDD, dateStr));
    // logInfo.setJobName(CommonDef.jobName.CON_JOB_AD);
    // logInfo.setJobStatType(type);
    // log.info("写入LOG:AdvertiserId=" + statAd.getAdName() + "开始...");
    // getSqlMapClientTemplate().insert("LOG_INFO.ibatorgenerated_insertSelective", logInfo);
    // log.info("写入LOG结束.");
    //
    // }
    // catch (DataAccessException e) {
    // log.info("写入" + statAd.getAdName() + "失败.");
    // log.error("原因是：" + e);
    // e.printStackTrace();
    // }
    // }
    // log.info("JOB的数据操作结束.");
    // }

    @SuppressWarnings("unchecked")
    public List<StatAd> queryCampaignbyList(StatAd record) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.queryCampaignbyList", record);
        return list;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.StatAdDAO#querybyadGroupList(com.mitian.airad.model.StatAd)
     */
    @SuppressWarnings("unchecked")
    public List<StatAd> querybyadGroupList(StatAd record) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadGroupList", record);
        return list;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.StatAdDAO#querybyadList(com.mitian.airad.model.StatAd)
     */
    @SuppressWarnings("unchecked")
    public List<StatAd> querybyadList(StatAd record) {
        List<StatAd> list = getSqlMapClientTemplate().queryForList("STAT_AD.querybyadList", record);
        return list;
    }

    /**
     * 查找广告总数
     * 
     * @return
     */
    public int statCountAdId(StatAd paramStatAd) {
        Integer count = (Integer) getSqlMapClientTemplate().queryForObject("JOB_APP_AD_AGENT.adCountStat", paramStatAd);
        return count;
    }

    /**
     * 根据条件查找日志总数
     * 
     * @return
     */
    public int statCountLog(LogInfo logBean) {
        Integer count =
                (Integer) getSqlMapClientTemplate().queryForObject("LOG_INFO.findByStatusJobNameCount", logBean);
        return count;
    }

    @SuppressWarnings("unchecked")
    public List<LogInfo> limitLogList(LogInfo paramLogInfo) {
        return getSqlMapClientTemplate().queryForList("LOG_INFO.findByStatusJobName", paramLogInfo);
    }

    @SuppressWarnings("unchecked")
    public List<StatAd> limitStatAdList(StatAd paramStatAd) {
        return getSqlMapClientTemplate().queryForList("JOB_APP_AD_AGENT.JOB_AD", paramStatAd);
    }

    public void addJobStatAd(StatAd statAd) {
        getSqlMapClientTemplate().insert("STAT_AD.ibatorgenerated_insertSelective", statAd);
    }

    // public void addJobLogStatAd(LogInfo logInfo) {
    // getSqlMapClientTemplate().insert("LOG_INFO.ibatorgenerated_insertSelective", logInfo);
    // }
}
