package com.mitian.airad.dao.impl;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapExecutor;
import com.mitian.airad.dao.CoreWithdrawDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreWithdraw;
import com.mitian.airad.model.StatWithdraw;

/**
 * CoreWithdrawDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class CoreWithdrawDAOImpl extends CustomSqlMapClientDaoSupport implements CoreWithdrawDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public CoreWithdrawDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int deleteByPrimaryKey(Integer drawMoneyId) {
        CoreWithdraw key = new CoreWithdraw();
        key.setDrawMoneyId(drawMoneyId);
        int rows = getSqlMapClientTemplate().delete("CORE_WITHDRAW.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public void insert(CoreWithdraw record) {
        getSqlMapClientTemplate().insert("CORE_WITHDRAW.ibatorgenerated_insert", record);
    }

    /**
     * 选择性的添加申请提现的数据
     */
    public int insertSelective(CoreWithdraw record) {
        int key = 0;
        Object objectKey = null;
        objectKey = getSqlMapClientTemplate().insert("CORE_WITHDRAW.ibatorgenerated_insertSelective", record);
        if (objectKey != null) {
            key = Integer.parseInt(objectKey.toString());
        }
        return key;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public CoreWithdraw selectByPrimaryKey(Integer drawMoneyId) {
        CoreWithdraw key = new CoreWithdraw();
        key.setDrawMoneyId(drawMoneyId);
        CoreWithdraw record =
                (CoreWithdraw) getSqlMapClientTemplate().queryForObject(
                        "CORE_WITHDRAW.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreWithdraw record) {
        int rows =
                getSqlMapClientTemplate().update("CORE_WITHDRAW.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_WITHDRAW
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int updateByPrimaryKey(CoreWithdraw record) {
        int rows = getSqlMapClientTemplate().update("CORE_WITHDRAW.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * 通过会员id查询提现记录列表(分页)
     */
    public List<CoreWithdraw> selectByMemberId(Long memberId, int currentPage, int pageSize, String asce) {
        List<CoreWithdraw> withdrawList = new ArrayList<CoreWithdraw>();
        int fromRecord = pageSize * (currentPage - 1);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("asce", asce);
        map.put("record", fromRecord);
        map.put("pageSize", pageSize);
        map.put("memberId", memberId);
        withdrawList = getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectByMemberId", map);
        return withdrawList;
    }

    /**
     * 通过会员id查询提现记录列表(重载)
     */
    public List<CoreWithdraw> selectByMemberId(Long memberId) {
        List<CoreWithdraw> withdrawList = new ArrayList<CoreWithdraw>();
        withdrawList = getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectAllByMemberId", memberId);
        return withdrawList;
    }

    /**
     * 通过会员id查询提现记录数量
     */
    public int selectCountByMemberId(Long memberId) {
        int count = 0;
        Object objectCount = null;
        objectCount = getSqlMapClientTemplate().queryForObject("CORE_WITHDRAW.selectCountByMemberId", memberId);
        if (objectCount != null) {
            count = Integer.parseInt(objectCount.toString());
        }
        return count;
    }

    // 判断用户是否是第一次提款
    public int queryTag(Long memberId) {
        int count = 0;
        List<CoreWithdraw> listBean =
                getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectwithdrawCount", memberId);
        if (listBean.size() != 0) {
            count = 1;
        }
        return count;

    }

    /*
     * 查询开发者一个人一天提款记录数--lfg添加 (non-Javadoc)
     * @see com.mitian.airad.dao.CoreWithdrawDAO#queryCount(java.util.Map)
     */
    public int queryCount(Long memberId) {

        int count = 0;

        List<CoreWithdraw> listBean =
                getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectwithdrawCount", memberId);
        if (listBean != null) {
            Iterator it = listBean.iterator();
            Date now = new Date();
            String nowdate = new SimpleDateFormat("yyyy-MM-dd").format(now);
            while (it.hasNext()) {
                CoreWithdraw cw = (CoreWithdraw) it.next();

                Date d = cw.getDrawTime();
                String drawtime = null;
                if (d != null) {
                    drawtime = new SimpleDateFormat("yyyy-MM-dd").format(d);
                    if (nowdate.equals(drawtime)) {
                        count++;
                    }

                }

            }
        }

        return count;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreWithdrawDAO#selectAll(java.util.Map)
     */
    public List<CoreWithdraw> selectAll(Map<String, Object> map) {
        List<CoreWithdraw> withdrawList = new ArrayList<CoreWithdraw>();
        withdrawList = getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectAll", map);
        return withdrawList;
    }

    @SuppressWarnings("unchecked")
    public void updateByKeyAndTime(Map<String, Object> map) {
        final String status = (String) map.get("status");
        final List<CoreWithdraw> withdrawList =
                getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectwithdrawByKeyAndTime", map);
        getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
            public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                executor.startBatch();
                for (CoreWithdraw withdraw : withdrawList) {
                    withdraw.setStatus(status);
                    executor.update("CORE_WITHDRAW.ibatorgenerated_updateByPrimaryKeySelective", withdraw);
                }
                executor.executeBatch();
                return null;
            }
        });
        int statDrawId = (Integer) map.get("statDrawId");
        StatWithdraw statWithdraw = new StatWithdraw();
        statWithdraw.setStatDrawId(statDrawId);
        statWithdraw.setStatus((String) map.get("status"));
        getSqlMapClientTemplate().update("STAT_WITHDRAW.ibatorgenerated_updateByPrimaryKeySelective", statWithdraw);
    }

    public List<StatWithdraw> selectAllStatistic(Map<String, Object> map) {
        List<StatWithdraw> withdrawList = new ArrayList<StatWithdraw>();
        withdrawList = getSqlMapClientTemplate().queryForList("STAT_WITHDRAW.selectAllStatistic", map);
        return withdrawList;
    }

    public List<CoreWithdraw> selectByMemberIdStatistic(Map<String, Object> map) {
        List<CoreWithdraw> withdrawList = new ArrayList<CoreWithdraw>();
        withdrawList = getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectAllByMemberIdStatistic", map);
        return withdrawList;
    }

    public int selectCountByMemberIdStatistic(Map<String, Object> map) {
        int count = 0;
        Object obj = getSqlMapClientTemplate().queryForObject("CORE_WITHDRAW.selectCountByMemberIdStatistic", map);
        if (null != obj) {
            count = (Integer) obj;
        }
        return count;
    }

    public int selectCountByMemberIdStatictis() {
        int count = 0;
        Object obj = getSqlMapClientTemplate().queryForObject("STAT_WITHDRAW.selectCountStatistic");
        if (null != obj) {
            count = (Integer) obj;
        }
        return count;
    }

    /*
     * (non-Javadoc) 根据时间排序规则查询列表
     * @see com.mitian.airad.dao.CoreWithdrawDAO#(java.util.Map)
     */
    public List<CoreWithdraw> queryListByOrderTime(Map<String, Object> params) {

        int pageSize = Integer.parseInt((String) (params.get("pageSize")));
        int currentPage = Integer.parseInt((String) (params.get("currentPage"))) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectAllOrderByTime", params);
    }

    /*************************************** for short time ****************************************************************/
    public int selectCountForShortTime() {
        int count = 0;
        Object obj = getSqlMapClientTemplate().queryForObject("CORE_WITHDRAW.selectCountForShortTime");
        if (null != obj) {
            count = (Integer) obj;
        }
        return count;
    }

    public List<CoreWithdraw> queryListForShortTime(Map<String, Object> params) {
        return getSqlMapClientTemplate().queryForList("CORE_WITHDRAW.selectAllForShortTime", params);
    }
}
