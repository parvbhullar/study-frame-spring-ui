package com.mitian.airad.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapExecutor;
import com.mitian.airad.CommonDef;
import com.mitian.airad.common.exception.InvalidInfoException;
import com.mitian.airad.dao.CoreCampaignDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreAd;
import com.mitian.airad.model.CoreAdGroup;
import com.mitian.airad.model.CoreCampaign;
import com.mitian.airad.utils.StringUtil;

/**
 * CoreCampaignDAOImpl.java
 * 
 * @author baojun
 */
//*/@Repository
public class CoreCampaignDAOImpl extends CustomSqlMapClientDaoSupport implements CoreCampaignDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreCampaignDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int deleteByPrimaryKey(Integer campaignId, Long memberId) {
        CoreCampaign key = new CoreCampaign();
        key.setCampaignId(campaignId);
        key.setMemberId(memberId);
        int rows = getSqlMapClientTemplate().delete("CORE_CAMPAIGN.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public void insert(CoreCampaign record) {
        getSqlMapClientTemplate().insert("CORE_CAMPAIGN.ibatorgenerated_insert", record);
    }

    public int insertReturnId(CoreCampaign record) {
        int campaignId = -2;
        Object obj = getSqlMapClientTemplate().insert("CORE_CAMPAIGN.ibatorgenerated_insertSelective", record);
        if (null != obj) {
            campaignId = Integer.parseInt(obj.toString());
        }
        return campaignId;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreCampaign selectByPrimaryKey(Integer campaignId, Long memberId) {
        CoreCampaign key = new CoreCampaign();
        key.setCampaignId(campaignId);
        key.setMemberId(memberId);
        CoreCampaign record =
                (CoreCampaign) getSqlMapClientTemplate().queryForObject(
                        "CORE_CAMPAIGN.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreCampaign record, Long memberId) {
        record.setMemberId(memberId);
        int rows =
                getSqlMapClientTemplate().update("CORE_CAMPAIGN.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_CAMPAIGN
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKey(CoreCampaign record, Long memberId) {
        record.setMemberId(memberId);
        int rows = getSqlMapClientTemplate().update("CORE_CAMPAIGN.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * @author wendong.Gao
     */
    public int txSuspend(CoreCampaign key) {
        if (StringUtils.isNotEmpty(key.getInGroupId())) {
            getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.AdGroupSuspend", key);
            if (!StringUtil.isEmpty(key.getInGroupId())) {
                getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.adSuspend", key);
            }
        }

        return getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.campaignSuspend", key);
    }

    /**
     * @author wendong.Gao
     */
    @SuppressWarnings("unchecked")
    public List<CoreAdGroup> selectAdGroupId(CoreCampaign key) {
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN_EXTEND.selectAdGroupId", key);
    }

    /**
     * @author wendong.Gao
     * @throws InvalidInfoException
     */
    @SuppressWarnings("unchecked")
    public void txCopy(CoreCampaign key) throws InvalidInfoException {
        // 活动信息
        CoreCampaign campaignInfo = selectByPrimaryKey(key.getCampaignId(), key.getMemberId());
        if (campaignInfo == null) {
            throw new InvalidInfoException("txCopy error campaignInfo not found :" + key.toString());
        }
        campaignInfo.setCampaignName(key.getCampaignName());
        int campaginId = -2;
        Object objId = getSqlMapClientTemplate().insert("CORE_CAMPAIGN.ibatorgenerated_insertSelective", campaignInfo);
        if (null != objId) {
            campaginId = Integer.parseInt(objId.toString());
        }
        // 活动组信息
        List<CoreAdGroup> listAdGroupInfo =
                getSqlMapClientTemplate().queryForList("CORE_AD_GROUP.selectAdGroupAll", key);
        for (CoreAdGroup coreAdGroupInfo : listAdGroupInfo) {
            // 将产生的新活动ID放到新的广告组中建立关系
            coreAdGroupInfo.setCampaignId(campaginId);
            // 所有广告组信息并返回主健
            int adGroupId = -2;
            Object obj =
                    getSqlMapClientTemplate().insert("CORE_AD_GROUP.ibatorgenerated_insertSelective", coreAdGroupInfo);
            if (null != obj) {
                adGroupId = Integer.parseInt(obj.toString());
            }
            // 所有广告信息
            List<CoreAd> listAd = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAll", coreAdGroupInfo);
            // 与广告建立关系
            batchAddExamlog2(listAd, adGroupId);
        }
    }

    @SuppressWarnings("unchecked")
    public void batchAddExamlog2(final List<CoreAd> listAd, final Integer adGroupId) {
        getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
            public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                executor.startBatch();
                for (CoreAd coreAd : listAd) {
                    coreAd.setAdGroupId(adGroupId);
                    coreAd.setAdGroupId(adGroupId);
                    executor.insert("CORE_AD.ibatorgenerated_insertSelective", coreAd);
                }
                executor.executeBatch();
                return null;
            }
        });
    }

    /**
     * @author wendong.Gao
     */
    @SuppressWarnings("unchecked")
    public List<CoreAd> selectAdAll(String inGroupId, Long memberId) {
        CoreCampaign key = new CoreCampaign();
        key.setInGroupId(inGroupId);
        key.setMemberId(memberId);
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN_EXTEND.selectAdAll", key);
    }

    /**
     * @author wendong.Gao
     */
    public int txDel(CoreCampaign key) {
        // 广告组ID IN条件
        String inGroupId = CommonDef.EMPTY;
        // 广告ID IN条件
        String inAdId = CommonDef.EMPTY;
        // 删除时不考虑任何状态只要与ID有关的，全部删除
        List<CoreAdGroup> listAdGroup = selectAdGroupId(key);
        key.setDelFlag(CommonDef.unDataBaseConstant.SUSPEND_TYPE);
        for (CoreAdGroup coreAdGroup : listAdGroup) {
            inGroupId += coreAdGroup.getAdGroupId() + CommonDef.STR_COMMA;
        }
        if (!StringUtil.isEmpty(inGroupId)) {
            // 所有的广告
            List<CoreAd> listAd = selectAdAll(StringUtil.formatStringToInCondition(inGroupId), key.getMemberId());
            for (CoreAd coreAd : listAd) {
                inAdId += coreAd.getAdId() + CommonDef.STR_COMMA;
            }
            if (StringUtils.isNotEmpty(inAdId)) {
                key.setInAdId(StringUtil.formatStringToInCondition(inAdId));
                // 删除RICH_AD WAP_AD BANNER 表中的广告信息
                getSqlMapClientTemplate().delete("CORE_CAMPAIGN_EXTEND.delRichAd", key);
                getSqlMapClientTemplate().delete("CORE_CAMPAIGN_EXTEND.delWapAd", key);
                getSqlMapClientTemplate().delete("CORE_CAMPAIGN_EXTEND.delBanner", key);
            }
        }
        if (StringUtils.isNotEmpty(inGroupId)) {
            key.setInGroupId(StringUtil.formatStringToInCondition(inGroupId));
            getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.delAd", key);
        }
        // 删除广告活动广告组广告删除标志
        getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.delCampaign", key);
        return getSqlMapClientTemplate().update("CORE_CAMPAIGN_EXTEND.delAdGroup", key);

    }

    @SuppressWarnings("unchecked")
    public List<CoreCampaign> selectByAll(Map<String, String> params) {
        int pageSize = StringUtil.stringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN.selectAll", params);
    }

    @SuppressWarnings("unchecked")
    public List<CoreCampaign> selectStatisticByTimeSlot(Map<String, String> params) {
        int pageSize = StringUtil.stringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("currentPage", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN.selectStatisticByTimeSlot", params);
    }

    @SuppressWarnings("unchecked")
    public int totalCountByTimeSlot(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_CAMPAIGN.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    public int totalCount(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_CAMPAIGN.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    /*
     * 根据条件查询
     */
    @SuppressWarnings("unchecked")
    public List queryBycondition(CoreCampaign record) {
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN.querybycondition", record);
    }

    @SuppressWarnings("unchecked")
    public List<CoreCampaign> findByNameList(CoreCampaign campaign) {
        return getSqlMapClientTemplate().queryForList("CORE_CAMPAIGN.findByNameList", campaign);
    }

}
