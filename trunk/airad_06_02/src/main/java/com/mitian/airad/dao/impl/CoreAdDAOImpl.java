package com.mitian.airad.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapExecutor;
import com.mitian.airad.CommonDef;
import com.mitian.airad.dao.CoreAdDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreAd;
import com.mitian.airad.model.CoreAdGroup;
import com.mitian.airad.utils.StringUtil;

/**
 * CoreAdDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class CoreAdDAOImpl extends CustomSqlMapClientDaoSupport implements CoreAdDAO {

    public CoreAd findAdListByAdGroupId(CoreAd ad) {
        CoreAd coreAd = new CoreAd();
        coreAd = (CoreAd) getSqlMapClientTemplate().queryForObject("CORE_AD.selectAdAllByAdGroup", ad);
        return coreAd;
    }

    public CoreAd findAdListByCampaignId(CoreAd ad) {
        CoreAd coreAd = new CoreAd();
        coreAd = (CoreAd) getSqlMapClientTemplate().queryForObject("CORE_AD.selectAdAllByCampaign", ad);
        return coreAd;
    }

    public List<CoreAd> findAdListByTimeSlot(Map params, int record, int pageSize) {
        params.put("fromRecord", record);
        params.put("pageSize", pageSize);
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllByTimeSlot", params);
        return adList;
    }

    public List<CoreAd> findAdListByTimeSlot(Map<String, String> params) {
        int pageSize = StringUtil.stringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("currentPage", String.valueOf(pageSize));
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllByTimeSlot", params);
        return adList;
    }

    public int totalCountByTimeSlot(Map params, int record, int pageSize) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    public int totalCountByTimeSlot(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    public List<CoreAd> findAllAd(CoreAdGroup coreAdGroup) {
        List<CoreAd> listAd = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAll", coreAdGroup);
        return listAd;
    }

    @SuppressWarnings("unchecked")
    public void batchSendCoreAd(final List<CoreAd> listBean) {
        if (listBean.size() > 0) {
            getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
                public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                    executor.startBatch();
                    for (CoreAd coreAd : listBean) {
                        coreAd.setSuspendType(CommonDef.appCon.CON_SUSPEND);
                        executor.update("CORE_AD.ibatorgenerated_updateByPrimaryKeySelective", coreAd);
                    }
                    executor.executeBatch();
                    return null;
                }
            });
        }
    }

    @SuppressWarnings("unchecked")
    public void batchStopCoreAd(final List<CoreAd> listBean) {
        if (listBean.size() > 0) {
            getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
                public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                    executor.startBatch();
                    for (CoreAd coreAd : listBean) {
                        coreAd.setSuspendType(CommonDef.appCon.CON_ISSUE);
                        executor.update("CORE_AD.ibatorgenerated_updateByPrimaryKeySelective", coreAd);
                    }
                    executor.executeBatch();
                    return null;
                }
            });
        }
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD
     * 
     * @ibatorgenerated Tue Jan 25 17:28:52 CST 2011
     */
    public CoreAdDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD
     * 
     * @ibatorgenerated Tue Jan 25 17:28:52 CST 2011
     */
    public void insert(CoreAd record) {
        getSqlMapClientTemplate().insert("CORE_AD.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD
     * 
     * @ibatorgenerated Tue Jan 25 17:28:52 CST 2011
     */
    public void insertSelective(CoreAd record) {
        getSqlMapClientTemplate().insert("CORE_AD.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD
     * 
     * @ibatorgenerated Tue Jan 25 17:28:52 CST 2011
     */
    public CoreAd selectByPrimaryKey(Integer adId, Long merberId) {
        CoreAd key = new CoreAd();
        key.setAdId(adId);
        key.setMemberId(merberId);
        CoreAd record =
                (CoreAd) getSqlMapClientTemplate().queryForObject("CORE_AD.ibatorgenerated_selectByPrimaryKeyMemberId",
                        key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD
     * 
     * @ibatorgenerated Tue Jan 25 17:28:52 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreAd record) {
        int rows = getSqlMapClientTemplate().update("CORE_AD.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /*
     * (non-Javadoc) wangzhongwei
     * @see com.mitian.airad.dao.CoreAdDAO#selectAdListByMemberId(java.lang.Integer) 根据会员id查询所有会员下的所有广告信息
     */
    public List<CoreAd> findAdListByMemberId(Long memberId) {
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllByMemberId", memberId);
        return adList;
    }

    /*
     * (non-Javadoc) wangzhongwei
     * @see com.mitian.airad.dao.CoreAdDAO#selectAdListByAdGroupId(java.lang.Integer) 根据广告组id查询所有会员下的所有广告信息
     */
    public List<CoreAd> findAdListByCond(Map params, int record, int pageSize) {
        params.put("fromRecord", record);
        params.put("pageSize", pageSize);
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllByAdGroupId", params);
        return adList;
    }

    public List<CoreAd> findAdListByCond(Map<String, String> params) {
        int pageSize = StringUtil.stringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllByAdGroupId", params);
        return adList;
    }

    /**
     * 获取分页广告
     */
    @SuppressWarnings("unchecked")
    public int countTotal(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    /*
     * (non-Javadoc) wangzhongwei
     * @see com.mitian.airad.dao.CoreAdDAO#insertAd(com.mitian.airad.model.CoreAd) 插入广告名称返回主键给用户
     */
    public int insertAd(CoreAd record) {
        int adId = 0;
        Object obj = getSqlMapClientTemplate().insert("CORE_AD.ibatorgenerated_insertSelective", record);
        if (null != obj && !"".equals(obj)) {
            adId = Integer.parseInt(obj.toString());
            return adId;
        }
        else {
            return 0;
        }
    }

    /**
     * 根据地区 查出该地区所有广告
     */
    public List<CoreAd> findCoreadByGroupextend(Integer groupextendId) {
        List<CoreAd> adList =
                getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAllBygroupextendId", groupextendId);
        return adList;
    }

    /**
     * 查询出 被删除的广告ID列表
     * 
     * @return 返回被删除的广告ID列表
     */
    public List<Integer> findDeledAdIdList(String updTime, int record, int size) {
        List<Integer> adList =
                getSqlMapClientTemplate().queryForList("CORE_AD.ibatorgenerated_selectDeledAdList", updTime, record,
                        size);
        return adList;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdDAO#findNoDeledAdList(java.lang.String, int, int)
     */
    public List<Integer> findNoDeledAdList(String updTime, int record, int size) {
        List<Integer> adList =
                getSqlMapClientTemplate().queryForList("CORE_AD.ibatorgenerated_selectNoDeledAdList", updTime, record,
                        size);
        return adList;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdDAO#queryList4Shopper(com.mitian.airad.model.CoreAd)
     */
    public List<CoreAd> queryList4Shopper(CoreAd coreAd) {
        List<CoreAd> adList = getSqlMapClientTemplate().queryForList("CORE_AD.queryList4Shopper", coreAd);
        return adList;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdDAO#getTotalAdShowCount(java.lang.Long)
     */
    public Integer getTotalAdShowCount(Long memberId) {
        return (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD.getTotalShowCount", memberId);
    }

}
