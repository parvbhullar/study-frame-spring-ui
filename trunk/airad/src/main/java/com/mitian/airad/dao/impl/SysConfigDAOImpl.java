package com.mitian.airad.dao.impl;

import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.SysConfigDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.SysConfig;

@Repository
public class SysConfigDAOImpl extends CustomSqlMapClientDaoSupport implements SysConfigDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public SysConfigDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public int deleteByPrimaryKey(Integer sysConfigId) {
        SysConfig key = new SysConfig();
        key.setSysConfigId(sysConfigId);
        int rows = getSqlMapClientTemplate().delete("SYS_CONFIG.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public void insert(SysConfig record) {
        getSqlMapClientTemplate().insert("SYS_CONFIG.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public void insertSelective(SysConfig record) {
        getSqlMapClientTemplate().insert("SYS_CONFIG.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public SysConfig selectByPrimaryKey(Integer sysConfigId) {
        SysConfig key = new SysConfig();
        key.setSysConfigId(sysConfigId);
        SysConfig record =
                (SysConfig) getSqlMapClientTemplate().queryForObject("SYS_CONFIG.ibatorgenerated_selectByPrimaryKey",
                        key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public int updateByPrimaryKeySelective(SysConfig record) {
        int rows = getSqlMapClientTemplate().update("SYS_CONFIG.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table SYS_CONFIG
     * 
     * @ibatorgenerated Tue Mar 01 19:02:36 CST 2011
     */
    public int updateByPrimaryKey(SysConfig record) {
        int rows = getSqlMapClientTemplate().update("SYS_CONFIG.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    public int updateAdConfig(SysConfig record) {
        int rows = getSqlMapClientTemplate().update("SYS_CONFIG.ibatorgenerated_updateAdConfig", record);
        return rows;
    }

    /**
     * 根据系统配置类型查处配置最大值
     */
    public SysConfig findMax(String sysType) {
        SysConfig key = new SysConfig();
        key.setSysType(sysType);
        SysConfig record = null;
        try {
            record = (SysConfig) getSqlMapClientTemplate().queryForObject("SYS_CONFIG.findMax", key);
        }
        catch (DataAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return record;
    }

    /**
     * 根据系统配置类型及key值查出相关配置
     */
    public SysConfig findConfigByTypeAndKey(String sysType, String sysKey) {
        SysConfig key = new SysConfig();
        key.setSysType(sysType);
        key.setSysKey(sysKey);
        SysConfig record = null;
        try {
            record = (SysConfig) getSqlMapClientTemplate().queryForObject("SYS_CONFIG.findConfigByTypeAndKey", key);
        }
        catch (DataAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.SysConfigDAO#findConfigListByType(java.lang.String)
     */
    public List<SysConfig> findConfigListByType(String sysType) {
        SysConfig key = new SysConfig();
        key.setSysType(sysType);
        List<SysConfig> record = null;
        try {
            record = getSqlMapClientTemplate().queryForList("SYS_CONFIG.findConfigListByTypeAndKey", key);
        }
        catch (DataAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.SysConfigDAO#getAll()
     */
    public List<SysConfig> getAll() {
        return getSqlMapClientTemplate().queryForList("SYS_CONFIG.getAll");
    }

    public SysConfig selectAgentOrAppPercent(SysConfig sysConfig) {
        SysConfig config = new SysConfig();
        config = (SysConfig) getSqlMapClientTemplate().queryForObject("SYS_CONFIG.findAgentOrAppPercent", sysConfig);
        return config;
    }
}
