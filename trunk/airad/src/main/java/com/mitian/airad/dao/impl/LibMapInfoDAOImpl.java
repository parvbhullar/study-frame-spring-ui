package com.mitian.airad.dao.impl;

import com.mitian.airad.dao.LibMapInfoDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreApp;
import com.mitian.airad.model.LibMapInfo;
import org.springframework.stereotype.Repository;

@Repository
public class LibMapInfoDAOImpl extends CustomSqlMapClientDaoSupport implements LibMapInfoDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public LibMapInfoDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public int deleteByPrimaryKey(Integer mapId) {
        LibMapInfo key = new LibMapInfo();
        key.setMapId(mapId);
        int rows = getSqlMapClientTemplate().delete("LIB_MAP_INFO.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public int insert(LibMapInfo record) {
        int mapId = 0;
        Object obj = getSqlMapClientTemplate().insert("LIB_MAP_INFO.ibatorgenerated_insert", record);
        if (null != obj && !"".equals(obj)) {
            mapId = Integer.parseInt(obj.toString());
            return mapId;
        }
        else {
            return 0;
        }
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public void insertSelective(LibMapInfo record) {
        getSqlMapClientTemplate().insert("LIB_MAP_INFO.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public LibMapInfo selectByPrimaryKey(Integer mapId) {
        LibMapInfo key = new LibMapInfo();
        key.setMapId(mapId);
        LibMapInfo record =
                (LibMapInfo) getSqlMapClientTemplate().queryForObject(
                        "LIB_MAP_INFO.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public int updateByPrimaryKeySelective(LibMapInfo record) {
        int rows = getSqlMapClientTemplate().update("LIB_MAP_INFO.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public int updateByPrimaryKeyWithBLOBs(LibMapInfo record) {
        int rows = getSqlMapClientTemplate().update("LIB_MAP_INFO.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_MAP_INFO
     * 
     * @ibatorgenerated Wed Mar 02 15:42:51 CST 2011
     */
    public int updateByPrimaryKeyWithoutBLOBs(LibMapInfo record) {
        int rows = getSqlMapClientTemplate().update("LIB_MAP_INFO.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
}
