package com.mitian.airad.dao.impl;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.mitian.airad.CommonDef;
import com.mitian.airad.common.utils.StringUtils;
import com.mitian.airad.dao.CoreRechargeHisDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreRechargeHis;

@Repository
public class CoreRechargeHisDAOImpl extends CustomSqlMapClientDaoSupport implements CoreRechargeHisDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public CoreRechargeHisDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int deleteByPrimaryKey(Integer id) {
        CoreRechargeHis key = new CoreRechargeHis();
        key.setId(id);
        int rows = getSqlMapClientTemplate().delete("CORE_RECHARGE_HIS.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public void insert(CoreRechargeHis record) {
        getSqlMapClientTemplate().insert("CORE_RECHARGE_HIS.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public void insertSelective(CoreRechargeHis record) {
        getSqlMapClientTemplate().insert("CORE_RECHARGE_HIS.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public CoreRechargeHis selectByPrimaryKey(Integer id) {
        CoreRechargeHis key = new CoreRechargeHis();
        key.setId(id);
        CoreRechargeHis record =
                (CoreRechargeHis) getSqlMapClientTemplate().queryForObject(
                        "CORE_RECHARGE_HIS.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreRechargeHis record) {
        int rows =
                getSqlMapClientTemplate().update("CORE_RECHARGE_HIS.ibatorgenerated_updateByPrimaryKeySelective",
                        record);
        return rows;
    }

    public int updateByPrimaryKeyStatus(CoreRechargeHis record) {
        int rows = getSqlMapClientTemplate().update("CORE_RECHARGE_HIS.ibatorgenerated_updateByStatus", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_RECHARGE_HIS
     * 
     * @ibatorgenerated Thu Jan 27 09:21:17 CST 2011
     */
    public int updateByPrimaryKey(CoreRechargeHis record) {
        int rows = getSqlMapClientTemplate().update("CORE_RECHARGE_HIS.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreRechargeHisDAO#selectCoreRechargeHisByMemberId() 根据代理商id 查询代理商下所有的充值记录
     */
    public List<CoreRechargeHis> selectCoreRechargeHisByAgentAdderId(Map params, int fromRecordHis, int pageSizeHis) {
        List<CoreRechargeHis> historyList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectCoreRechargeHisByAgentAdderId", params,
                        fromRecordHis, pageSizeHis);
        return historyList;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreRechargeHisDAO#countTotal(java.util.Map)根据代理商id 查询代理商下所有的充值记录 分页
     */
    public int countTotal(Map params) {
        List<CoreRechargeHis> historyList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectCoreRechargeHisByAgentAdderId", params);
        return historyList.size();
    }

    // /**
    // * 根据会员id查询充值历史记录(分页)
    // */
    // public List<CoreRechargeHis> selectRechargeHisByMemberId(Long memberId, int currentPage, int pageSize) {
    // int fromRecord = pageSize * (currentPage - 1);
    // List<CoreRechargeHis> rechargeHisList =
    // getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectRechargeHisByAgentAdderId", memberId,
    // fromRecord, pageSize);
    // return rechargeHisList;
    // }
    /**
     * 根据会员id查询充值历史记录(分页)
     */
    @SuppressWarnings("unchecked")
    public List<CoreRechargeHis> selectRechargeHisByMemberId(Long memberId, int currentPage, int pageSize, String flag,
            String desc) {
        int fromRecord = pageSize * (currentPage - 1);
        CoreRechargeHis coreRechargeHis = new CoreRechargeHis();
        coreRechargeHis.setMemberId(memberId);
        coreRechargeHis.setRechargeStatus(flag);
        coreRechargeHis.setFromRecord(String.valueOf(fromRecord));
        coreRechargeHis.setPageSize(String.valueOf(pageSize));
        coreRechargeHis.setDesc(desc);
        List<CoreRechargeHis> rechargeHisList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectRechargeHisByAgentAdderId",
                        coreRechargeHis);
        return rechargeHisList;
    }

    /**
     * 报表导出
     * 
     * @param memberId
     * @return
     */
    public List<CoreRechargeHis> selectRechargeHisByMemberId(Long memberId, String status) {
        CoreRechargeHis coreRechargeHis = new CoreRechargeHis();
        coreRechargeHis.setMemberId(memberId);
        coreRechargeHis.setRechargeStatus(status);
        List<CoreRechargeHis> rechargeHisList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectRechargeHisByAgentAdderId",
                        coreRechargeHis);
        return rechargeHisList;
    }

    // /**
    // * 通过会员id查询会员充值历史记录的数量
    // *
    // * @param memberId
    // * @return
    // */
    // public int selectCountByMemberId(Long memberId) {
    // int count = 0;
    // Object objectCount =
    // getSqlMapClientTemplate().queryForObject("CORE_RECHARGE_HIS.selectCountByAgentAdderId", memberId);
    // if (null != objectCount) {
    // count = Integer.parseInt(objectCount.toString());
    // }
    // return count;
    // }
    /**
     * 通过会员id查询会员充值历史记录的数量
     * 
     * @param memberId
     * @return
     */
    public int selectCountByMemberId(CoreRechargeHis coreRechargeHis) {
        int count = 0;
        Object objectCount =
                getSqlMapClientTemplate()
                        .queryForObject("CORE_RECHARGE_HIS.selectCountByAgentAdderId", coreRechargeHis);
        if (null != objectCount) {
            count = Integer.parseInt(objectCount.toString());
        }
        return count;
    }

    /**
     * 后台会员充值历史记录的数量
     * 
     * @param memberId
     * @return
     */
    public CoreRechargeHis selectCountPlatForm(String status, Long memberId) {
        CoreRechargeHis his = new CoreRechargeHis();
        his.setRechargeStatus(status);
        his.setMemberId(memberId);
        his = (CoreRechargeHis) getSqlMapClientTemplate().queryForObject("CORE_RECHARGE_HIS.selectCountPlatForm", his);
        // if (null != objectCount) {
        // count = Integer.parseInt(objectCount.toString());
        // }
        return his;
    }

    public CoreRechargeHis selectRechargeHisByOrderId(String serialNum) {
        CoreRechargeHis his =
                (CoreRechargeHis) getSqlMapClientTemplate().queryForObject(
                        "CORE_RECHARGE_HIS.selectRechargeHisBySerialNum", serialNum);
        return his;
    }

    public List<CoreRechargeHis> queryRecHisOrderByTime(Map<String, Object> params) {

        int pageSize = Integer.parseInt((String) (params.get("pageSize")));
        int currentPage = Integer.parseInt((String) (params.get("currentPage"))) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.selectAllOrderByTime", params);

    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreRechargeHisDAO#cancelRechargeOrder(java.lang.String, java.lang.Long)
     */
    public int updateRechargeOrderStatus(CoreRechargeHis coreRechargeHis) {
        return getSqlMapClientTemplate().update("CORE_RECHARGE_HIS.cancelRechargeOrder", coreRechargeHis);
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreRechargeHisDAO#getCoreRechargeHisByOrderIdAndMemberId(java.lang.String,
     * java.lang.Long)
     */
    public CoreRechargeHis getCoreRechargeHisByOrderIdAndMemberId(String serialNum, Long memberId) {
        CoreRechargeHis coreRechargeHis = new CoreRechargeHis();
        coreRechargeHis.setSerialNum(serialNum);
        coreRechargeHis.setMemberId(memberId);
        CoreRechargeHis order =
                (CoreRechargeHis) getSqlMapClientTemplate().queryForObject(
                        "CORE_RECHARGE_HIS.getCoreRechargeHisByOrderIdAndMemberId", coreRechargeHis);
        return order;
    }

    /**
     * 后台查看充值
     * 
     * @author gao
     * @param currentPage
     * @param pageSize
     * @param flag
     * @param desc
     * @return
     */
    @SuppressWarnings("unchecked")
    public List<CoreRechargeHis> queryRechargeHisListPlatForm(int currentPage, int pageSize, String flag, String desc,
            Long memberId) {
        int fromRecord = pageSize * (currentPage - 1);
        CoreRechargeHis coreRechargeHis = new CoreRechargeHis();
        coreRechargeHis.setFromRecord(String.valueOf(fromRecord));
        coreRechargeHis.setPageSize(String.valueOf(pageSize));
        coreRechargeHis.setDesc(desc);
        if (StringUtils.isEmpty(desc)) {
            coreRechargeHis.setDesc("2");
        }

        coreRechargeHis.setRechargeStatus(flag);
        coreRechargeHis.setMemberId(memberId);
        List<CoreRechargeHis> rechargeHisList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.queryRechargeHisListPlatForm",
                        coreRechargeHis);
        return rechargeHisList;
    }

    /**
     * 历史导出xml
     * 
     * @param status
     * @param desc
     * @return
     */
    @SuppressWarnings("unchecked")
    public List<CoreRechargeHis> queryReHisListPFormXml(String status, String desc) {
        CoreRechargeHis coreRechargeHis = new CoreRechargeHis();
        if (StringUtils.isEmpty(status)) {
            status = CommonDef.rechargeHisType.CON_PLATFORM;
            // + CommonDef.STR_COMMA+ CommonDef.rechargeHisType.CON_PLATFORM_APP;
        }
        coreRechargeHis.setRechargeStatus(status);
        coreRechargeHis.setDesc(desc);
        List<CoreRechargeHis> rechargeHisList =
                getSqlMapClientTemplate().queryForList("CORE_RECHARGE_HIS.queryRechargeHisListPlatForm",
                        coreRechargeHis);
        return rechargeHisList;
    }
}
