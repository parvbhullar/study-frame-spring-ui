package com.mitian.airad.dao.impl;

import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.CoreAccountInfoDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreAccountInfo;

/**
 * CoreAccountInfoDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class CoreAccountInfoDAOImpl extends CustomSqlMapClientDaoSupport implements CoreAccountInfoDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public CoreAccountInfoDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public int deleteByPrimaryKey(Integer accId) {
        CoreAccountInfo key = new CoreAccountInfo();
        key.setAccId(accId);
        int rows = getSqlMapClientTemplate().delete("CORE_ACCOUNT_INFO.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public void insert(CoreAccountInfo record) {
        getSqlMapClientTemplate().insert("CORE_ACCOUNT_INFO.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public int insertSelective(CoreAccountInfo record) {
        int key = 0;
        Object objectKey = null;
        objectKey = getSqlMapClientTemplate().insert("CORE_ACCOUNT_INFO.ibatorgenerated_insertSelective", record);
        if (objectKey != null) {
            key = Integer.parseInt(objectKey.toString());
        }
        return key;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public CoreAccountInfo selectByPrimaryKey(Integer accId) {
        CoreAccountInfo key = new CoreAccountInfo();
        key.setAccId(accId);
        CoreAccountInfo record =
                (CoreAccountInfo) getSqlMapClientTemplate().queryForObject(
                        "CORE_ACCOUNT_INFO.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreAccountInfo record) {
        int rows =
                getSqlMapClientTemplate().update("CORE_ACCOUNT_INFO.ibatorgenerated_updateByPrimaryKeySelective",
                        record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table
     * CORE_ACCOUNT_INFO
     * 
     * @ibatorgenerated Sun Jan 30 10:16:21 CST 2011
     */
    public int updateByPrimaryKey(CoreAccountInfo record) {
        int rows = getSqlMapClientTemplate().update("CORE_ACCOUNT_INFO.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * 根据会员id查询会员账户信息
     */
    @Override
    public CoreAccountInfo selectAccountInfoByMemberId(Long memberId) {
        CoreAccountInfo accountInfo =
                (CoreAccountInfo) getSqlMapClientTemplate().queryForObject(
                        "CORE_ACCOUNT_INFO.selectAccountInfoByMemberId", memberId);
        return accountInfo;
    }

    /**
     * 根据会员id修改会员账户信息
     * 
     * @param record
     * @return
     */
    public int updateByMemberIdSelective(CoreAccountInfo record) {
        int row = 0;
        row = getSqlMapClientTemplate().update("CORE_ACCOUNT_INFO.ibatorgenerated_updateByMemberIdSelective", record);
        return row;
    }
}
