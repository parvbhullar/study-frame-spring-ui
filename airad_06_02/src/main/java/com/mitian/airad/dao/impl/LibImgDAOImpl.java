package com.mitian.airad.dao.impl;

import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.LibImgDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.LibImg;

/**
 * LibImgDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class LibImgDAOImpl extends CustomSqlMapClientDaoSupport implements LibImgDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public LibImgDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public int deleteByPrimaryKey(Integer imgId) {
        LibImg key = new LibImg();
        key.setImgId(imgId);
        int rows = getSqlMapClientTemplate().delete("LIB_IMG.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public int insert(LibImg record) {
        int adId = 0;
        Object obj = getSqlMapClientTemplate().insert("LIB_IMG.ibatorgenerated_insert", record);
        if (null != obj && !"".equals(obj)) {
            adId = Integer.parseInt(obj.toString());
            return adId;
        }
        else {
            return 0;
        }
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public void insertSelective(LibImg record) {
        getSqlMapClientTemplate().insert("LIB_IMG.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public LibImg selectByPrimaryKey(Integer imgId) {
        LibImg key = new LibImg();
        key.setImgId(imgId);
        LibImg record =
                (LibImg) getSqlMapClientTemplate().queryForObject("LIB_IMG.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public int updateByPrimaryKeySelective(LibImg record) {
        int rows = getSqlMapClientTemplate().update("LIB_IMG.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public int updateByPrimaryKeyWithBLOBs(LibImg record) {
        int rows = getSqlMapClientTemplate().update("LIB_IMG.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_IMG
     * 
     * @ibatorgenerated Thu Mar 10 16:04:14 CST 2011
     */
    public int updateByPrimaryKeyWithoutBLOBs(LibImg record) {
        int rows = getSqlMapClientTemplate().update("LIB_IMG.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
}
