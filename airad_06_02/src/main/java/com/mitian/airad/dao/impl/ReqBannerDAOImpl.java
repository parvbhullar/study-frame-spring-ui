package com.mitian.airad.dao.impl;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.mitian.airad.CommonDef;
import com.mitian.airad.common.utils.StringUtils;
import com.mitian.airad.dao.ReqBannerDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.ReqBanner;

/**
 * ReqBannerDAOImpl.java
 * 
 * @author wangzhongwei
 */
@Repository
public class ReqBannerDAOImpl extends CustomSqlMapClientDaoSupport implements ReqBannerDAO {
    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public ReqBannerDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public int deleteByPrimaryKey(Integer bannerReqId) {
        ReqBanner key = new ReqBanner();
        key.setBannerReqId(bannerReqId);
        int rows = getSqlMapClientTemplate().delete("REQ_BANNER.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public void insert(ReqBanner record) {
        getSqlMapClientTemplate().insert("REQ_BANNER.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public void insertSelective(ReqBanner record) {
        getSqlMapClientTemplate().insert("REQ_BANNER.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public ReqBanner selectByPrimaryKey(Integer bannerReqId) {
        ReqBanner key = new ReqBanner();
        key.setBannerReqId(bannerReqId);
        ReqBanner record =
                (ReqBanner) getSqlMapClientTemplate().queryForObject("REQ_BANNER.ibatorgenerated_selectByPrimaryKey",
                        key);
        return record;
    }

    /**
     * 根据广告ID ,查询出该广告出现的次数
     */
    public Integer selectCountByAdId(Integer adId) {
        Integer showNum =
                (Integer) getSqlMapClientTemplate()
                        .queryForObject("REQ_BANNER.ibatorgenerated_selectCountByAdId", adId);
        if (showNum == null) {
            showNum = 0;
        }
        return showNum;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public int updateByPrimaryKeySelective(ReqBanner record) {
        int rows = getSqlMapClientTemplate().update("REQ_BANNER.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table REQ_BANNER
     * 
     * @ibatorgenerated Thu Feb 17 14:21:30 CST 2011
     */
    public int updateByPrimaryKey(ReqBanner record) {
        int rows = getSqlMapClientTemplate().update("REQ_BANNER.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.ReqBannerDAO#insertRB(com.mitian.airad.model.ReqBanner) 动态插入
     */
    public int insertRB(ReqBanner record) {
        int bannerReqId = 0;
        Object obj = getSqlMapClientTemplate().insert("REQ_BANNER.ibatorgenerated_insertSelective", record);
        if (null != obj && !"".equals(obj)) {
            bannerReqId = Integer.parseInt(obj.toString());
        }
        return bannerReqId;
    }

    /**
     * 查看广告展示是否千次展示
     * 
     * @param adId
     * @param appCode
     * @return
     */
    public boolean showAdCount(Integer adId, String appCode) {
        if (StringUtils.isEmpty(appCode) || StringUtils.isBlank(String.valueOf(adId))) {
            NullPointerException nullpoint = new NullPointerException();
            nullpoint.printStackTrace();
            return false;
        }
        ReqBanner reqBanner = new ReqBanner();
        reqBanner.setAdId(adId);
        reqBanner.setAppCode(appCode);
        Integer count = (Integer) getSqlMapClientTemplate().queryForObject("REQ_BANNER.showAdCount", reqBanner);
        if (count >= 1000) {
            getSqlMapClientTemplate().update("REQ_BANNER.statusCountUpdate", reqBanner);
            return true;
        }
        return false;
    }

    /**
     * 查找广告展示大于CommonDef.intNum.CON_SHOW_NUM
     * 
     * @return
     */
    @SuppressWarnings("unchecked")
    public List<ReqBanner> findByAdIdShow() {
        ReqBanner key = new ReqBanner();
        key.setCount(CommonDef.intNum.CON_SHOW_NUM);
        List<ReqBanner> list = getSqlMapClientTemplate().queryForList("REQ_BANNER.show_adid", key);
        return list;
    }

    /**
     * 查找出每个广告ID在APPCODE中的展示数
     * 
     * @param adId
     * @return
     */
    @SuppressWarnings("unchecked")
    public List<ReqBanner> findByAdIdToAppCode(Integer adId) {
        ReqBanner key = new ReqBanner();
        key.setAdId(adId);
        return getSqlMapClientTemplate().queryForList("REQ_BANNER.findByAdIdAppCode", key);

    }
}
