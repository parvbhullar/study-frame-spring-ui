package com.mitian.airad.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapExecutor;
import com.mitian.airad.dao.CoreReportDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreReport;
import com.mitian.airad.utils.StringUtil;

/**
 * CoreReportDAOImpl.java
 * 
 * @author baojun
 */
@Repository
public class CoreReportDAOImpl extends CustomSqlMapClientDaoSupport implements CoreReportDAO {

    @SuppressWarnings("unchecked")
    public List<CoreReport> pageQuery(Map<String, String> params) {
        int pageSize = StringUtil.stringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.stringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("currentPage", String.valueOf(currentPage));
        return getSqlMapClientTemplate().queryForList("CORE_REPORT.selectAll", params);
    }

    public int totalCount(CoreReport report) {
        return (Integer) getSqlMapClientTemplate().queryForObject("CORE_REPORT.selectAllCount", report);
    }

    @SuppressWarnings("unchecked")
    public void batchDelete(final List<Integer> deleteListId, final Long memberId) {
        getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
            public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                executor.startBatch();
                for (Integer reportId : deleteListId) {
                    CoreReport report = new CoreReport();
                    report.setReportId(reportId);
                    report.setMemberId(memberId);
                    executor.update("CORE_REPORT.deleteReport", report);
                }
                executor.executeBatch();
                return null;
            }
        });
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public CoreReportDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public void insert(CoreReport record) {
        getSqlMapClientTemplate().insert("CORE_REPORT.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public void insertSelective(CoreReport record) {
        getSqlMapClientTemplate().insert("CORE_REPORT.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public CoreReport selectByPrimaryKey(Integer reportId, Long memberId) {
        CoreReport key = new CoreReport();
        key.setReportId(reportId);
        key.setMemberId(memberId);
        CoreReport record =
                (CoreReport) getSqlMapClientTemplate().queryForObject("CORE_REPORT.ibatorgenerated_selectByPrimaryKey",
                        key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public int updateByPrimaryKeyWithBLOBs(CoreReport record, Long memberId) {
        record.setMemberId(memberId);
        int rows = getSqlMapClientTemplate().update("CORE_REPORT.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_REPORT
     * 
     * @ibatorgenerated Mon Feb 28 14:57:58 CST 2011
     */
    public int updateByPrimaryKeyWithoutBLOBs(CoreReport record, Long memberId) {
        record.setMemberId(memberId);
        int rows = getSqlMapClientTemplate().update("CORE_REPORT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * 返回当前插入的id值
     */
    public String insertReturnId(CoreReport record) {
        String reportId = "";
        Object obj = getSqlMapClientTemplate().insert("CORE_CAMPAIGN.ibatorgenerated_insertSelective", record);
        if (null != obj) {
            reportId = String.valueOf(obj);
        }
        return reportId;
    }
}
