package com.mitian.airad.dao.impl;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.CoreAppDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreApp;
import com.mitian.airad.utils.StringUtil;

@Repository
public class CoreAppDAOImpl extends CustomSqlMapClientDaoSupport implements CoreAppDAO {

    @SuppressWarnings("unchecked")
    public List<CoreApp> selectByTimeSlot(Map<String, String> params) {
        int pageSize = StringUtil.StringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.StringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_APP.selectStatisticByTimeSlot", params);
    }

    public int selectCountByTimeSlot(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_APP.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    public CoreApp appDetail(CoreApp app) {
        return (CoreApp) getSqlMapClientTemplate().queryForObject("CORE_APP.ibatorgenerated_findApp", app);
    }

    @SuppressWarnings("unchecked")
    public List<CoreApp> findList(CoreApp app) {
        List<CoreApp> appList = null;
        appList = getSqlMapClientTemplate().queryForList("CORE_APP.findListApp", app);
        return appList;
    }

    @SuppressWarnings("unchecked")
    public List<CoreApp> selectByAll(Map<String, String> params) {
        int pageSize = StringUtil.StringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.StringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        return getSqlMapClientTemplate().queryForList("CORE_APP.selectAll", params);
    }

    @SuppressWarnings("unchecked")
    public List<CoreApp> selectStatistic(Map<String, String> params) {
        int pageSize = StringUtil.StringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.StringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        return getSqlMapClientTemplate().queryForList("CORE_APP.selectStatistic", params, fromRecord, pageSize);
    }

    public int findAppContStatistic(Map<String, String> params) {
        return getSqlMapClientTemplate().queryForList("CORE_APP.selectStatistic", params).size();
    }

    public int totalCount(Map<String, String> params) {
        return (Integer) getSqlMapClientTemplate().queryForObject("CORE_APP.selectAllCount", params);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreAppDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int deleteByPrimaryKey(Integer appId) {
        CoreApp key = new CoreApp();
        key.setAppId(appId);
        int rows = getSqlMapClientTemplate().delete("CORE_APP.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public void insert(CoreApp record) {
        getSqlMapClientTemplate().insert("CORE_APP.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public void insertSelective(CoreApp record) {
        getSqlMapClientTemplate().insert("CORE_APP.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreApp selectByPrimaryKey(Integer appId, Long memberId) {
        CoreApp key = new CoreApp();
        key.setAppId(appId);
        key.setMemberId(memberId);
        CoreApp record =
                (CoreApp) getSqlMapClientTemplate().queryForObject("CORE_APP.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreApp record) {
        int rows = getSqlMapClientTemplate().update("CORE_APP.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_APP
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKey(CoreApp record) {
        int rows = getSqlMapClientTemplate().update("CORE_APP.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAppDAO#findAppByAppCode(java.lang.String) 根据appcode 查询app 信息
     */
    public CoreApp findAppByAppCode(String appCode) {
        CoreApp coreApp = new CoreApp();
        coreApp.setAppCode(appCode);
        CoreApp record = (CoreApp) getSqlMapClientTemplate().queryForObject("CORE_APP.selectAppByAppCode", coreApp);
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAppDAO#findAppByCodeAndNameAndBlcking(com.mitian.airad.model.CoreApp)
     */
    public List<CoreApp> findAppByCodeAndNameAndBlcking(Map<String, String> params) {
        int pageSize = StringUtil.StringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.StringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        List<CoreApp> record =
                getSqlMapClientTemplate().queryForList("CORE_APP.findListAppByCodeAndNameAndBlcking", params,
                        fromRecord, pageSize);
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAppDAO#findAppContByCodeAndNameAndBlcking(com.mitian.airad.model.CoreApp)
     */
    public int findAppContByCodeAndNameAndBlcking(CoreApp app) {
        return (Integer) getSqlMapClientTemplate().queryForObject("CORE_APP.selectAllCountByAdmin", app);
    }

    @SuppressWarnings("unchecked")
    public List<CoreApp> findAppCountByDay(Map<String, String> params) {
        return getSqlMapClientTemplate().queryForList("CORE_APP.selectStatisticCount", params);
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAppDAO#findApp(java.lang.Integer)
     */
    public CoreApp findApp(Integer id) {
        CoreApp key = new CoreApp();
        key.setAppId(id);
        CoreApp coreApp = (CoreApp) getSqlMapClientTemplate().queryForObject("CORE_APP.findListAppByAppId", key);
        return coreApp;
    }

    public CoreApp findApp(Map<String, String> params) {
        CoreApp coreApp = (CoreApp) getSqlMapClientTemplate().queryForObject("CORE_APP.selectApp", params);
        return coreApp;
    }
}
