package com.mitian.airad.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.mitian.airad.Constants;
import com.mitian.airad.dao.CoreInviteCodeDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreInviteCode;
import com.mitian.airad.model.InviteCodeBean;

@Repository
public class CoreInviteCodeDAOImpl extends CustomSqlMapClientDaoSupport implements CoreInviteCodeDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreInviteCodeDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int deleteByPrimaryKey(Integer codeId) {
        CoreInviteCode key = new CoreInviteCode();
        key.setCodeId(codeId);
        int rows = getSqlMapClientTemplate().delete("CORE_INVITE_CODE.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public void insert(CoreInviteCode record) {
        getSqlMapClientTemplate().insert("CORE_INVITE_CODE.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public void insertSelective(CoreInviteCode record) {
        getSqlMapClientTemplate().insert("CORE_INVITE_CODE.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreInviteCode selectByPrimaryKey(Integer codeId) {
        CoreInviteCode key = new CoreInviteCode();
        key.setCodeId(codeId);
        CoreInviteCode record =
                (CoreInviteCode) getSqlMapClientTemplate().queryForObject(
                        "CORE_INVITE_CODE.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreInviteCode record) {
        int rows =
                getSqlMapClientTemplate()
                        .update("CORE_INVITE_CODE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_INVITE_CODE
     * 
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKey(CoreInviteCode record) {
        int rows = getSqlMapClientTemplate().update("CORE_INVITE_CODE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /*
     * 根据邀请码查询邀请信息
     * @see com.mitian.airad.dao.CoreInviteCodeDAO#selectInviteByCode(java.lang.String)
     */
    public CoreInviteCode selectInviteByCode(String code) {
        CoreInviteCode key = new CoreInviteCode();
        key.setCode(code);
        CoreInviteCode record = null;
        List<CoreInviteCode> arr =
                getSqlMapClientTemplate().queryForList("CORE_INVITE_CODE.ibatorgenerated_selectByCode", key);
        if (arr.size() > 0) {
            record = arr.get(arr.size() - 1);
        }
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreInviteCodeDAO#queryInviteCode()
     */
    public List<InviteCodeBean> queryInviteCode(String stat, int fromRecord, int pageSize) {
        Map<String, Object> key = new HashMap<String, Object>();
        key.put("inviteStatus", stat);
        if (Constants.INVITE_STATUS_NO_USAGE.equals(stat)) {
            key.put("inviteStatusGesendet", Constants.INVITE_STATUS_GESENDET);
        }
        List<InviteCodeBean> record =
                getSqlMapClientTemplate().queryForList("CORE_INVITE_CODE.ibatorgenerated_selectAll", key, fromRecord,
                        pageSize);
        return record;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreInviteCodeDAO#queryInviteCodeByStatusSize(java.lang.String)
     */
    public int queryInviteCodeByStatusSize(String stat) {
        Map<String, String> key = new HashMap<String, String>();
        key.put("inviteStatus", stat);
        if (Constants.INVITE_STATUS_NO_USAGE.equals(stat)) {
            key.put("inviteStatusGesendet", Constants.INVITE_STATUS_GESENDET);
        }
        Object record =
                getSqlMapClientTemplate().queryForObject("CORE_INVITE_CODE.ibatorgenerated_selectbyStatus", key);
        int count = 0;
        if (null != record) {
            count = Integer.parseInt(record.toString());
        }
        return count;
    }
}
