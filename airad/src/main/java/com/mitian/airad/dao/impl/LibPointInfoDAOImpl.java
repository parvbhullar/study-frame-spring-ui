package com.mitian.airad.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.mitian.airad.dao.LibPointInfoDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.LibPointInfo;

@Repository
public class LibPointInfoDAOImpl extends CustomSqlMapClientDaoSupport implements LibPointInfoDAO {

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public LibPointInfoDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public int deleteByMapId(Integer mapId) {
        LibPointInfo key = new LibPointInfo();
        key.setMapId(mapId);
        int rows = getSqlMapClientTemplate().delete("LIB_POINT_INFO.ibatorgenerated_deleteByMapId", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public void insert(LibPointInfo record) {
        getSqlMapClientTemplate().insert("LIB_POINT_INFO.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public void insertSelective(LibPointInfo record) {
        getSqlMapClientTemplate().insert("LIB_POINT_INFO.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public LibPointInfo selectByPrimaryKey(Integer fid) {
        LibPointInfo key = new LibPointInfo();
        key.setFid(fid);
        LibPointInfo record =
                (LibPointInfo) getSqlMapClientTemplate().queryForObject(
                        "LIB_POINT_INFO.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public int updateByPrimaryKeySelective(LibPointInfo record) {
        int rows =
                getSqlMapClientTemplate().update("LIB_POINT_INFO.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public int updateByPrimaryKeyWithBLOBs(LibPointInfo record) {
        int rows =
                getSqlMapClientTemplate().update("LIB_POINT_INFO.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table LIB_POINT_INFO
     * 
     * @ibatorgenerated Wed Mar 02 18:52:22 CST 2011
     */
    public int updateByPrimaryKeyWithoutBLOBs(LibPointInfo record) {
        int rows = getSqlMapClientTemplate().update("LIB_POINT_INFO.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     *通过mapId获取地图点
     */
    public List<LibPointInfo> findAdListByMapId(Integer mapId) {
        List<LibPointInfo> pointList = new ArrayList<LibPointInfo>();
        pointList = getSqlMapClientTemplate().queryForList("LIB_POINT_INFO.selectPointAllByMapId", mapId);
        return pointList;
    }
}
