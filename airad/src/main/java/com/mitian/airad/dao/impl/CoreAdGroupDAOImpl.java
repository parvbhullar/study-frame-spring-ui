package com.mitian.airad.dao.impl;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;
import org.springframework.stereotype.Repository;

import com.ibatis.sqlmap.client.SqlMapExecutor;
import com.mitian.airad.dao.CoreAdGroupDAO;
import com.mitian.airad.dao.support.CustomSqlMapClientDaoSupport;
import com.mitian.airad.model.CoreAd;
import com.mitian.airad.model.CoreAdGroup;
import com.mitian.airad.utils.StringUtil;

@Repository
public class CoreAdGroupDAOImpl extends CustomSqlMapClientDaoSupport implements CoreAdGroupDAO {

    @SuppressWarnings("unchecked")
    public void txCopy(CoreAdGroup key, Long memberId) {
        CoreAdGroup adGroup = findByPrimaryKey(key.getAdGroupId(), memberId);
        // 所有广告信息
        List<CoreAd> listAd = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAll", adGroup);
        adGroup.setAdGroupName(key.getAdGroupName());
        Object objId = getSqlMapClientTemplate().insert("CORE_AD_GROUP.ibatorgenerated_insertSelective", adGroup);
        int adGroupId = -2;
        if (null != objId) {
            adGroupId = Integer.parseInt(objId.toString());
        }

        if (listAd.size() > 0) {
            // 与广告建立关系
            batchAddExamlog2(listAd, adGroupId);
        }
    }

    @SuppressWarnings("unchecked")
    public void batchAddExamlog2(final List<CoreAd> listAd, final Integer adGroupId) {
        getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
            public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                executor.startBatch();
                for (CoreAd coreAd : listAd) {
                    coreAd.setAdId(null);
                    coreAd.setAdGroupId(adGroupId);
                    executor.insert("CORE_AD.ibatorgenerated_insertSelective", coreAd);
                }
                executor.executeBatch();
                return null;
            }
        });
    }

    @SuppressWarnings("unchecked")
    public void batchDelete(final CoreAdGroup coreAdGroup) {
        final List<CoreAd> listAd = getSqlMapClientTemplate().queryForList("CORE_AD.selectAdAll", coreAdGroup);
        if (listAd.size() > 0) {
            getSqlMapClientTemplate().execute(new SqlMapClientCallback() {
                public Object doInSqlMapClient(SqlMapExecutor executor) throws SQLException {
                    executor.startBatch();
                    for (CoreAd coreAd : listAd) {
                        coreAd.setDelFlag("1");
                        executor.update("CORE_AD.ibatorgenerated_updateByPrimaryKeySelective", coreAd);
                    }
                    executor.executeBatch();
                    return null;
                }
            });
        }
        coreAdGroup.setDelFlag("1");
        updateByPrimaryKeySelective(coreAdGroup);

    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD_GROUP
     *
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int insert(CoreAdGroup record) {
        Object obj = getSqlMapClientTemplate().insert("CORE_AD_GROUP.ibatorgenerated_insert", record);
        int id = 0;
        if (obj != null) {
            id = Integer.parseInt(obj.toString());
        }
        return id;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD_GROUP
     *
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int insertSelective(CoreAdGroup record) {
        Object obj = getSqlMapClientTemplate().insert("CORE_AD_GROUP.ibatorgenerated_insertSelective", record);
        int id = 0;
        if (obj != null) {
            id = Integer.parseInt(obj.toString());
        }
        return id;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD_GROUP
     *
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public CoreAdGroup findByPrimaryKey(Integer adGroupId, Long memberId) {
        CoreAdGroup key = new CoreAdGroup();
        key.setAdGroupId(adGroupId);
        key.setMemberId(memberId);
        CoreAdGroup record =
                (CoreAdGroup) getSqlMapClientTemplate().queryForObject(
                        "CORE_AD_GROUP.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table CORE_AD_GROUP
     *
     * @ibatorgenerated Thu Jan 20 16:39:10 CST 2011
     */
    public int updateByPrimaryKeySelective(CoreAdGroup record) {
        int rows =
                getSqlMapClientTemplate().update("CORE_AD_GROUP.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdGroupDAO#selectAllGroup() 查询所有广告组
     */
    public List<CoreAdGroup> findAllGroup(Map params, int record, int pageSize) {
        params.put("fromRecord", String.valueOf(record));
        params.put("pageSize", String.valueOf(pageSize));
        List<CoreAdGroup> coreAdGroupList =
                getSqlMapClientTemplate().queryForList("CORE_AD_GROUP.ibatorgenerated_selectAllGroup", params);
        return coreAdGroupList;
    }

    public List<CoreAdGroup> findAllGroupByTimeSlot(Map<String, String> params) {
        int pageSize = StringUtil.StringToInteger(params.get("pageSize"));
        int currentPage = StringUtil.StringToInteger(params.get("currentPage")) - 1;
        int fromRecord = pageSize * currentPage;
        params.put("fromRecord", String.valueOf(fromRecord));
        params.put("pageSize", String.valueOf(pageSize));
        List<CoreAdGroup> coreAdGroupList =
                getSqlMapClientTemplate()
                        .queryForList("CORE_AD_GROUP.ibatorgenerated_selectAllGroupByTimeSlot", params);
        return coreAdGroupList;
    }

    public int findCountByTimeSlot(Map<String, String> params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD_GROUP.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdGroupDAO#countTotal(java.util.Map) 分页
     */
    // TODO add by baojun 此处countd方法需修改
    public int countTotal(Map params) {
        int count = 0;
        Integer c = (Integer) getSqlMapClientTemplate().queryForObject("CORE_AD_GROUP.findCount", params);
        if (null != c) {
            count = c.intValue();
        }
        return count;
    }

    /*
     * (non-Javadoc)
     * @see com.mitian.airad.dao.CoreAdGroupDAO#selectAllGroupByMemberId(java.lang.Integer) 根据会员id 查询活动下的所有广告组信息
     */
    public List<CoreAdGroup> findAllGroupByMemberId(Long memberId) {
        CoreAdGroup key = new CoreAdGroup();
        key.setMemberId(memberId);
        List<CoreAdGroup> coreAdGroupList =
                getSqlMapClientTemplate().queryForList("CORE_AD_GROUP.ibatorgenerated_selectAllGroupByMemberId", key);
        return coreAdGroupList;
    }

	public List<CoreAdGroup> findGroupByMemberIdByPage(Long memberId, Map map) {
        CoreAdGroup key = new CoreAdGroup();
        key.setMemberId(memberId);
        List<CoreAdGroup> coreAdGroupList =
                getSqlMapClientTemplate().queryForList("CORE_AD_GROUP.ibatorgenerated_selectAllGroupByMemberId", key);
        return coreAdGroupList;

	}

}
